/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.13.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { DayType, Decimal, Denom, Addr, Currency, InstantiateMsg, TokenPairPrice, ExecuteMsg, QueryMsg, Expiration, Timestamp, Uint64, OwnershipForString } from "./PriceOracle.types";
export interface PriceOracleReadOnlyInterface {
  contractAddress: string;
  getPrice: () => Promise<TokenPairPrice>;
  getCreatorOwnership: () => Promise<OwnershipForString>;
}
export class PriceOracleQueryClient implements PriceOracleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getPrice = this.getPrice.bind(this);
    this.getCreatorOwnership = this.getCreatorOwnership.bind(this);
  }
  getPrice = async (): Promise<TokenPairPrice> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_price: {}
    });
  };
  getCreatorOwnership = async (): Promise<OwnershipForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_creator_ownership: {}
    });
  };
}
export interface PriceOracleInterface extends PriceOracleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updatePrice: ({
    tokenPairPrice
  }: {
    tokenPairPrice: TokenPairPrice;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class PriceOracleClient extends PriceOracleQueryClient implements PriceOracleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updatePrice = this.updatePrice.bind(this);
  }
  updatePrice = async ({
    tokenPairPrice
  }: {
    tokenPairPrice: TokenPairPrice;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_price: {
        token_pair_price: tokenPairPrice
      }
    }, fee_, memo_, funds_);
  };
}