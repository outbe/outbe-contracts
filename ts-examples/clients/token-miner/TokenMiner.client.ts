/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.13.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, AccessMsg, AccessPermissions, ExecuteMsg, Uint128, TokenType, QueryMsg, Addr, AccessListResponse, AccessPermissionsResponse, CanMintResponse, ConfigResponse, Config } from "./TokenMiner.types";
export interface TokenMinerReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  accessPermissions: ({
    address
  }: {
    address: string;
  }) => Promise<AccessPermissionsResponse>;
  accessList: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<AccessListResponse>;
  canMint: ({
    address,
    tokenType
  }: {
    address: string;
    tokenType: TokenType;
  }) => Promise<CanMintResponse>;
}
export class TokenMinerQueryClient implements TokenMinerReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.accessPermissions = this.accessPermissions.bind(this);
    this.accessList = this.accessList.bind(this);
    this.canMint = this.canMint.bind(this);
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  accessPermissions = async ({
    address
  }: {
    address: string;
  }): Promise<AccessPermissionsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      access_permissions: {
        address
      }
    });
  };
  accessList = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<AccessListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      access_list: {
        limit,
        start_after: startAfter
      }
    });
  };
  canMint = async ({
    address,
    tokenType
  }: {
    address: string;
    tokenType: TokenType;
  }): Promise<CanMintResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      can_mint: {
        address,
        token_type: tokenType
      }
    });
  };
}
export interface TokenMinerInterface extends TokenMinerReadOnlyInterface {
  contractAddress: string;
  sender: string;
  mine: ({
    amount,
    recipient,
    tokenType
  }: {
    amount: Uint128;
    recipient: string;
    tokenType: TokenType;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  mineGratisWithNod: ({
    nodTokenId
  }: {
    nodTokenId: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  addToAccessList: ({
    address,
    permissions
  }: {
    address: string;
    permissions: AccessPermissions;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  removeFromAccessList: ({
    address
  }: {
    address: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updatePermissions: ({
    address,
    permissions
  }: {
    address: string;
    permissions: AccessPermissions;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  transferAdmin: ({
    newAdmin
  }: {
    newAdmin: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateContracts: ({
    gratisContract,
    nodContract,
    priceOracleContract,
    promisContract
  }: {
    gratisContract?: string;
    nodContract?: string;
    priceOracleContract?: string;
    promisContract?: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class TokenMinerClient extends TokenMinerQueryClient implements TokenMinerInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mine = this.mine.bind(this);
    this.mineGratisWithNod = this.mineGratisWithNod.bind(this);
    this.addToAccessList = this.addToAccessList.bind(this);
    this.removeFromAccessList = this.removeFromAccessList.bind(this);
    this.updatePermissions = this.updatePermissions.bind(this);
    this.transferAdmin = this.transferAdmin.bind(this);
    this.updateContracts = this.updateContracts.bind(this);
  }
  mine = async ({
    amount,
    recipient,
    tokenType
  }: {
    amount: Uint128;
    recipient: string;
    tokenType: TokenType;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mine: {
        amount,
        recipient,
        token_type: tokenType
      }
    }, fee_, memo_, funds_);
  };
  mineGratisWithNod = async ({
    nodTokenId
  }: {
    nodTokenId: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mine_gratis_with_nod: {
        nod_token_id: nodTokenId
      }
    }, fee_, memo_, funds_);
  };
  addToAccessList = async ({
    address,
    permissions
  }: {
    address: string;
    permissions: AccessPermissions;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_to_access_list: {
        address,
        permissions
      }
    }, fee_, memo_, funds_);
  };
  removeFromAccessList = async ({
    address
  }: {
    address: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_from_access_list: {
        address
      }
    }, fee_, memo_, funds_);
  };
  updatePermissions = async ({
    address,
    permissions
  }: {
    address: string;
    permissions: AccessPermissions;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_permissions: {
        address,
        permissions
      }
    }, fee_, memo_, funds_);
  };
  transferAdmin = async ({
    newAdmin
  }: {
    newAdmin: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer_admin: {
        new_admin: newAdmin
      }
    }, fee_, memo_, funds_);
  };
  updateContracts = async ({
    gratisContract,
    nodContract,
    priceOracleContract,
    promisContract
  }: {
    gratisContract?: string;
    nodContract?: string;
    priceOracleContract?: string;
    promisContract?: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_contracts: {
        gratis_contract: gratisContract,
        nod_contract: nodContract,
        price_oracle_contract: priceOracleContract,
        promis_contract: promisContract
      }
    }, fee_, memo_, funds_);
  };
}