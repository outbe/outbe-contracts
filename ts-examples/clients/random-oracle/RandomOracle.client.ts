/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.13.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, RandomResponse } from "./RandomOracle.types";
export interface RandomOracleReadOnlyInterface {
  contractAddress: string;
  randomValue: ({
    countValues,
    fromRange,
    toRange
  }: {
    countValues: number;
    fromRange: number;
    toRange: number;
  }) => Promise<RandomResponse>;
}
export class RandomOracleQueryClient implements RandomOracleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.randomValue = this.randomValue.bind(this);
  }
  randomValue = async ({
    countValues,
    fromRange,
    toRange
  }: {
    countValues: number;
    fromRange: number;
    toRange: number;
  }): Promise<RandomResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      random_value: {
        count_values: countValues,
        from_range: fromRange,
        to_range: toRange
      }
    });
  };
}
export interface RandomOracleInterface extends RandomOracleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setRandom: ({
    randomValue
  }: {
    randomValue?: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class RandomOracleClient extends RandomOracleQueryClient implements RandomOracleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setRandom = this.setRandom.bind(this);
  }
  setRandom = async ({
    randomValue
  }: {
    randomValue?: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_random: {
        random_value: randomValue
      }
    }, fee_, memo_, funds_);
  };
}