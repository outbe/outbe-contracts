/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.13.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, HexBinary, InstantiateMsg, TeeSetup, ZkSetup, ExecuteMsg, ZkProof, ZkProofPublicData, TributeInputPayload, QueryMsg, ConfigResponse, PubkeyResponse } from "./TributeFactory.types";
export interface TributeFactoryReadOnlyInterface {
  contractAddress: string;
  getConfig: () => Promise<ConfigResponse>;
  pubkey: () => Promise<PubkeyResponse>;
}
export class TributeFactoryQueryClient implements TributeFactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getConfig = this.getConfig.bind(this);
    this.pubkey = this.pubkey.bind(this);
  }
  getConfig = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {}
    });
  };
  pubkey = async (): Promise<PubkeyResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pubkey: {}
    });
  };
}
export interface TributeFactoryInterface extends TributeFactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    newOwner,
    newTeeConfig,
    newTributeAddress
  }: {
    newOwner?: Addr;
    newTeeConfig?: TeeSetup;
    newTributeAddress?: Addr;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  offer: ({
    cipherText,
    ephemeralPubkey,
    nonce,
    zkProof
  }: {
    cipherText: HexBinary;
    ephemeralPubkey: HexBinary;
    nonce: HexBinary;
    zkProof: ZkProof;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  offerInsecure: ({
    tributeInput,
    zkProof
  }: {
    tributeInput: TributeInputPayload;
    zkProof: ZkProof;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class TributeFactoryClient extends TributeFactoryQueryClient implements TributeFactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.offer = this.offer.bind(this);
    this.offerInsecure = this.offerInsecure.bind(this);
  }
  updateConfig = async ({
    newOwner,
    newTeeConfig,
    newTributeAddress
  }: {
    newOwner?: Addr;
    newTeeConfig?: TeeSetup;
    newTributeAddress?: Addr;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        new_owner: newOwner,
        new_tee_config: newTeeConfig,
        new_tribute_address: newTributeAddress
      }
    }, fee_, memo_, funds_);
  };
  offer = async ({
    cipherText,
    ephemeralPubkey,
    nonce,
    zkProof
  }: {
    cipherText: HexBinary;
    ephemeralPubkey: HexBinary;
    nonce: HexBinary;
    zkProof: ZkProof;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      offer: {
        cipher_text: cipherText,
        ephemeral_pubkey: ephemeralPubkey,
        nonce,
        zk_proof: zkProof
      }
    }, fee_, memo_, funds_);
  };
  offerInsecure = async ({
    tributeInput,
    zkProof
  }: {
    tributeInput: TributeInputPayload;
    zkProof: ZkProof;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      offer_insecure: {
        tribute_input: tributeInput,
        zk_proof: zkProof
      }
    }, fee_, memo_, funds_);
  };
}