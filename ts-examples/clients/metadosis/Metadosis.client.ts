/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.13.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Decimal, Addr, InstantiateMsg, ExecuteMsg, QueryMsg, Uint128, AllocationResponse, RunType, DailyRunsResponse, DailyRunsData, DailyRunInfo, RunInfo, TributesDistributionResponse, TributesDistributionData } from "./Metadosis.types";
export interface MetadosisReadOnlyInterface {
  contractAddress: string;
  dailyRuns: () => Promise<DailyRunsResponse>;
  tributesDistribution: () => Promise<TributesDistributionResponse>;
  allocation: () => Promise<AllocationResponse>;
}
export class MetadosisQueryClient implements MetadosisReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.dailyRuns = this.dailyRuns.bind(this);
    this.tributesDistribution = this.tributesDistribution.bind(this);
    this.allocation = this.allocation.bind(this);
  }
  dailyRuns = async (): Promise<DailyRunsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      daily_runs: {}
    });
  };
  tributesDistribution = async (): Promise<TributesDistributionResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      tributes_distribution: {}
    });
  };
  allocation = async (): Promise<AllocationResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      allocation: {}
    });
  };
}
export interface MetadosisInterface extends MetadosisReadOnlyInterface {
  contractAddress: string;
  sender: string;
  execute: ({
    runDate
  }: {
    runDate?: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  burnAll: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class MetadosisClient extends MetadosisQueryClient implements MetadosisInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.execute = this.execute.bind(this);
    this.burnAll = this.burnAll.bind(this);
  }
  execute = async ({
    runDate
  }: {
    runDate?: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      execute: {
        run_date: runDate
      }
    }, fee_, memo_, funds_);
  };
  burnAll = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn_all: {}
    }, fee_, memo_, funds_);
  };
}