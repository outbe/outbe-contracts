/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.13.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Uint64, Expiration, Timestamp, OwnershipForString, TokenAllocatorData } from "./TokenAllocator.types";
export interface TokenAllocatorReadOnlyInterface {
  contractAddress: string;
  getData: () => Promise<TokenAllocatorData>;
  getCreatorOwnership: () => Promise<OwnershipForString>;
  getRangeData: ({
    fromBlock,
    toBlock
  }: {
    fromBlock: Uint64;
    toBlock: Uint64;
  }) => Promise<TokenAllocatorData>;
}
export class TokenAllocatorQueryClient implements TokenAllocatorReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getData = this.getData.bind(this);
    this.getCreatorOwnership = this.getCreatorOwnership.bind(this);
    this.getRangeData = this.getRangeData.bind(this);
  }
  getData = async (): Promise<TokenAllocatorData> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_data: {}
    });
  };
  getCreatorOwnership = async (): Promise<OwnershipForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_creator_ownership: {}
    });
  };
  getRangeData = async ({
    fromBlock,
    toBlock
  }: {
    fromBlock: Uint64;
    toBlock: Uint64;
  }): Promise<TokenAllocatorData> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_range_data: {
        from_block: fromBlock,
        to_block: toBlock
      }
    });
  };
}