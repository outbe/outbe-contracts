/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.13.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface InstantiateMsg {
  burner?: string | null;
  collection_info_extension: NodCollectionExtension;
  creator?: string | null;
  minter?: string | null;
  name: string;
  symbol: string;
}
export interface NodCollectionExtension {}
export type ExecuteMsg = {
  submit: {
    extension: SubmitExtension;
    owner: string;
    token_id: string;
  };
} | {
  burn: {
    token_id: string;
  };
} | {
  burn_all: {};
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type Decimal = string;
export type Uint128 = string;
export type Denom = {
  native: string;
} | {
  cw20: Addr;
};
export type Addr = string;
export type State = "issued" | "qualified";
export interface SubmitExtension {
  created_at?: Timestamp | null;
  entity: NodEntity;
}
export interface NodEntity {
  floor_price_minor: Decimal;
  floor_rate: Uint128;
  gratis_load_minor: Uint128;
  issuance_price_minor: Decimal;
  nod_id: string;
  nominal_price_minor: Decimal;
  owner: string;
  qualified_at?: Timestamp | null;
  settlement_currency: Denom;
  state: State;
  symbolic_rate: Decimal;
}
export type QueryMsg = {
  contract_info: {};
} | {
  owner_of: {
    token_id: string;
  };
} | {
  num_tokens: {};
} | {
  get_minter_ownership: {};
} | {
  get_creator_ownership: {};
} | {
  nft_info: {
    token_id: string;
  };
} | {
  tokens: {
    limit?: number | null;
    owner: string;
    query_order?: Order | null;
    start_after?: string | null;
  };
} | {
  all_tokens: {
    limit?: number | null;
    query_order?: Order | null;
    start_after?: string | null;
  };
};
export type Order = "ascending" | "descending";
export type MigrateMsg = string;
export interface TokensResponse {
  tokens: string[];
}
export interface ContractInfoResponseForNodConfig {
  collection_config: NodConfig;
  collection_info: CollectionInfo;
}
export interface NodConfig {}
export interface CollectionInfo {
  name: string;
  symbol: string;
  updated_at: Timestamp;
}
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {};
};
export interface OwnershipForString {
  owner?: string | null;
  pending_expiry?: Expiration | null;
  pending_owner?: string | null;
}
export interface NftInfoResponseForNodData {
  extension: NodData;
  owner: Addr;
  token_id: string;
}
export interface NodData {
  floor_price_minor: Decimal;
  floor_rate: Uint128;
  gratis_load_minor: Uint128;
  issuance_price_minor: Decimal;
  issued_at: Timestamp;
  nod_id: string;
  nominal_price_minor: Decimal;
  owner: string;
  qualified_at?: Timestamp | null;
  settlement_currency: Denom;
  state: State;
  symbolic_rate: Decimal;
}
export interface NumTokensResponse {
  count: number;
}
export interface OwnerOfResponse {
  owner: string;
}