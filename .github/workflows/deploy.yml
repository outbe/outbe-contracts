name: Deploy

on:
  workflow_dispatch:
    inputs:
      is_latest:
        description: "Mark as latest"
        required: false
        type: boolean

      deploy_all:
        description: "Deploy all contracts"
        required: false
        type: boolean

      deploy_wusdc:
        description: "Deploy wUSDC"
        required: false
        type: boolean

      deploy_gratis:
        description: "Deploy Gratis"
        required: false
        type: boolean

      deploy_promis:
        description: "Deploy Promis"
        required: false
        type: boolean

env:
  # Chain configuration
  CHAIN_ID: outbe-devnet-1
  FEE_DENOM: unit
  RPC: https://rpc.dev.outbe.net

  CONTRACT_REGISTRY_CONTRACT_ADDRESS: "outbe1pu6e36nugjxv3w2tcvxgld39y5kx3zz6l74dwxyyytx9cz5xwg5s4sknnl"
  FAUCET_ADDRESS: "outbe13a6zjh96w9z9y2defkktdc6vn4r5h3s7xk6jkv"

jobs:
  deploy:
    name: Optimize & Deploy
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/outbe/outbe-wasm-builder:0.2.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true

      - name: Configure wallet
        env:
          WALLET_PRIVATE_KEY: ${{ secrets.WALLET_PRIVATE_KEY }}
        run: |
          outbe-noded keys import-hex ci $WALLET_PRIVATE_KEY --keyring-backend test
          OWNER_ADDRESS=$(outbe-noded keys show ci --keyring-backend test --output json | jq -r '.address')
          echo "OWNER_ADDRESS=$OWNER_ADDRESS" >> $GITHUB_ENV

      - name: Make Optimized build
        run: |
          optimize.sh .

      - name: Query and Export Contract Addresses
        if: ${{ github.event.inputs.deploy_all == 'false' }}
        run: |
          echo "Querying deployed contract addresses from Contract Registry"
          QUERY_RESPONSE=$(outbe-noded query wasm contract-state smart $CONTRACT_REGISTRY_CONTRACT_ADDRESS \
            '{"get_deployment": {"commit_id" : null } }' --node $RPC --output json)
          echo "Query response: $QUERY_RESPONSE"
          
          # Parse and export contract addresses
          echo "$QUERY_RESPONSE" | jq -r '.data.deployment.contracts[] | "\(.name)=\(.address)"' | while read -r line; do
            if [[ $line == *"="* ]]; then
              echo "$line" >> $GITHUB_ENV
              echo "Exported: $line"
            fi
          done

      - name: Deploy wUSDC
        if: ${{ github.event.inputs.deploy_all == 'true' || github.event.inputs.deploy_wusdc == 'true' }}
        run: |
          CW20_CODE_ID=$(./scripts/store_code.sh artifacts/cw20_copy.wasm)
          echo "CW20_CODE_ID=$CW20_CODE_ID" >> $GITHUB_ENV
          INIT_PAYLOAD=$(jq -n --arg minter $OWNER_ADDRESS --from-file ./contracts/cw20/fixtures/wusdc_init.json)
          WUSDC_CONTRACT_ADDRESS=$(./scripts/init_contract.sh "wUSDC" $CW20_CODE_ID "$INIT_PAYLOAD")
          echo "WUSDC_CONTRACT_ADDRESS=$WUSDC_CONTRACT_ADDRESS" >> $GITHUB_ENV

      - name: Deploy Gratis
        if: ${{ github.event.inputs.deploy_all == 'true' || github.event.inputs.deploy_gratis == 'true' }}
        run: |
          GRATIS_CODE_ID=$(./scripts/store_code.sh artifacts/gratis.wasm)
          INIT_PAYLOAD=$(jq -n --from-file ./contracts/gratis/fixtures/init.json)
          GRATIS_CONTRACT_ADDRESS=$(./scripts/init_contract.sh "Gratis" $GRATIS_CODE_ID "$INIT_PAYLOAD")
          echo "GRATIS_CONTRACT_ADDRESS=$GRATIS_CONTRACT_ADDRESS" >> $GITHUB_ENV

      - name: Deploy Promis
        if: ${{ github.event.inputs.deploy_all == 'true' || github.event.inputs.deploy_promis == 'true' }}
        run: |
          PROMIS_CODE_ID=$(./scripts/store_code.sh artifacts/promis.wasm)
          INIT_PAYLOAD=$(jq -n --from-file ./contracts/promis/fixtures/init.json)
          PROMIS_CONTRACT_ADDRESS=$(./scripts/init_contract.sh "Promis" $PROMIS_CODE_ID "$INIT_PAYLOAD")
          echo "PROMIS_CONTRACT_ADDRESS=$PROMIS_CONTRACT_ADDRESS" >> $GITHUB_ENV

      - name: Deploy Price Oracle
        run: |
          PRICE_ORACLE_CODE_ID=$(./scripts/store_code.sh artifacts/price_oracle.wasm)
          INIT_PAYLOAD=$(jq -n --arg usdc_address $WUSDC_CONTRACT_ADDRESS --from-file ./contracts/price-oracle/fixtures/init.json)
          PRICE_ORACLE_CONTRACT_ADDRESS=$(./scripts/init_contract.sh "Price Oracle" $PRICE_ORACLE_CODE_ID "$INIT_PAYLOAD")
          echo "PRICE_ORACLE_CONTRACT_ADDRESS=$PRICE_ORACLE_CONTRACT_ADDRESS" >> $GITHUB_ENV
          echo "add pair coen/usdc"
          UPDATE_PAYLOAD=$(jq -n --arg token1 coen --arg token2 usdc -f ./contracts/price-oracle/fixtures/add_token_pair.json )
          ./scripts/execute_tx.sh $PRICE_ORACLE_CONTRACT_ADDRESS "$UPDATE_PAYLOAD"
          echo "set green day for pair coen/usdc"
          UPDATE_PAYLOAD=$(jq -n --arg token1 coen --arg token2 usdc --arg day_type green -f ./contracts/price-oracle/fixtures/set_day_type.json )
          ./scripts/execute_tx.sh $PRICE_ORACLE_CONTRACT_ADDRESS "$UPDATE_PAYLOAD"
          echo "update price for pair coen/usdc"
          UPDATE_PAYLOAD=$(jq -n --arg token1 coen --arg token2 usdc --arg price 0.012 -f ./contracts/price-oracle/fixtures/update_price.json )
          ./scripts/execute_tx.sh $PRICE_ORACLE_CONTRACT_ADDRESS "$UPDATE_PAYLOAD"
          echo "add pair xau/usd"
          UPDATE_PAYLOAD=$(jq -n -f ./contracts/price-oracle/fixtures/add_xau_usd_pair.json )
          ./scripts/execute_tx.sh $PRICE_ORACLE_CONTRACT_ADDRESS "$UPDATE_PAYLOAD"
          echo "set green day for pair xau/usd"
          UPDATE_PAYLOAD=$(jq -n -f ./contracts/price-oracle/fixtures/set_xau_usd_day_type.json )
          ./scripts/execute_tx.sh $PRICE_ORACLE_CONTRACT_ADDRESS "$UPDATE_PAYLOAD"
          echo "update price for pair xau/usd"
          UPDATE_PAYLOAD=$(jq -n -f ./contracts/price-oracle/fixtures/update_price_xau_usd.json )
          ./scripts/execute_tx.sh $PRICE_ORACLE_CONTRACT_ADDRESS "$UPDATE_PAYLOAD"

      - name: Deploy Random Oracle
        run: |
          RANDOM_ORACLE_CODE_ID=$(./scripts/store_code.sh artifacts/random_oracle.wasm)
          INIT_PAYLOAD=$(jq -n --from-file ./contracts/random-oracle/fixtures/init.json)
          RANDOM_ORACLE_CONTRACT_ADDRESS=$(./scripts/init_contract.sh "Random Oracle" $RANDOM_ORACLE_CODE_ID "$INIT_PAYLOAD")
          echo "RANDOM_ORACLE_CONTRACT_ADDRESS=$RANDOM_ORACLE_CONTRACT_ADDRESS" >> $GITHUB_ENV

      - name: Deploy Token Allocator
        run: |
          TOKEN_ALLOCATOR_CODE_ID=$(./scripts/store_code.sh artifacts/token_allocator.wasm)
          INIT_PAYLOAD=$(jq -n --from-file ./contracts/token-allocator/fixtures/init.json)
          TOKEN_ALLOCATOR_CONTRACT_ADDRESS=$(./scripts/init_contract.sh "Token Allocator" $TOKEN_ALLOCATOR_CODE_ID "$INIT_PAYLOAD")
          echo "TOKEN_ALLOCATOR_CONTRACT_ADDRESS=$TOKEN_ALLOCATOR_CONTRACT_ADDRESS" >> $GITHUB_ENV

      - name: Deploy Vector
        run: |
          VECTOR_CODE_ID=$(./scripts/store_code.sh artifacts/vector.wasm)
          INIT_PAYLOAD=$(jq -n --from-file ./contracts/vector/fixtures/init.json)
          VECTOR_CONTRACT_ADDRESS=$(./scripts/init_contract.sh "Vector" $VECTOR_CODE_ID "$INIT_PAYLOAD")
          echo "VECTOR_CONTRACT_ADDRESS=$VECTOR_CONTRACT_ADDRESS" >> $GITHUB_ENV

      - name: Deploy Tribute Factory
        run: |
          TRIBUTE_FACTORY_CODE_ID=$(./scripts/store_code.sh artifacts/tribute_factory.wasm)
          INIT_PAYLOAD=$(jq -n --from-file ./contracts/tribute-factory/fixtures/init.json)
          TRIBUTE_FACTORY_CONTRACT_ADDRESS=$(./scripts/init_contract.sh "Tribute Factory" $TRIBUTE_FACTORY_CODE_ID "$INIT_PAYLOAD")
          echo "TRIBUTE_FACTORY_CONTRACT_ADDRESS=$TRIBUTE_FACTORY_CONTRACT_ADDRESS" >> $GITHUB_ENV

      - name: Deploy Tribute
        run: |
          TRIBUTE_CODE_ID=$(./scripts/store_code.sh artifacts/tribute.wasm)
          INIT_PAYLOAD=$(jq -n --arg price_oracle $PRICE_ORACLE_CONTRACT_ADDRESS --arg minter $TRIBUTE_FACTORY_CONTRACT_ADDRESS --from-file ./contracts/tribute/fixtures/init.json)
          TRIBUTE_CONTRACT_ADDRESS=$(./scripts/init_contract.sh "Tribute" $TRIBUTE_CODE_ID "$INIT_PAYLOAD")
          echo "TRIBUTE_CONTRACT_ADDRESS=$TRIBUTE_CONTRACT_ADDRESS" >> $GITHUB_ENV

          echo "Link Tribute Factory and Tribute contracts"
          UPDATE_PAYLOAD=$(jq -n --arg tribute_address $TRIBUTE_CONTRACT_ADDRESS -f ./contracts/tribute-factory/fixtures/update-tribute-address.json)
          ./scripts/execute_tx.sh $TRIBUTE_FACTORY_CONTRACT_ADDRESS "$UPDATE_PAYLOAD"

      - name: Deploy Nod
        run: |
          NOD_CODE_ID=$(./scripts/store_code.sh artifacts/nod.wasm)
          INIT_PAYLOAD=$(jq -n --from-file ./contracts/nod/fixtures/init.json)
          NOD_CONTRACT_ADDRESS=$(./scripts/init_contract.sh "Nod" $NOD_CODE_ID "$INIT_PAYLOAD")
          echo "NOD_CONTRACT_ADDRESS=$NOD_CONTRACT_ADDRESS" >> $GITHUB_ENV

      - name: Deploy Agent Registry
        run: |
          AGENT_REGISTRY_CODE_ID=$(./scripts/store_code.sh artifacts/agent_registry.wasm)
          INIT_PAYLOAD=$(jq -n --from-file ./contracts/agent-registry/fixtures/init.json)
          AGENT_REGISTRY_CONTRACT_ADDRESS=$(./scripts/init_contract.sh "Agent Registry" $AGENT_REGISTRY_CODE_ID "$INIT_PAYLOAD")
          echo "AGENT_REGISTRY_CONTRACT_ADDRESS=$AGENT_REGISTRY_CONTRACT_ADDRESS" >> $GITHUB_ENV

      - name: Deploy Metadosis
        run: |
          METADOSIS_CODE_ID=$(./scripts/store_code.sh artifacts/metadosis.wasm)
          INIT_PAYLOAD=$(jq -n --arg price_oracle_address $PRICE_ORACLE_CONTRACT_ADDRESS --arg random_oracle_address $RANDOM_ORACLE_CONTRACT_ADDRESS --arg vector_address $VECTOR_CONTRACT_ADDRESS --arg tribute_address $TRIBUTE_CONTRACT_ADDRESS --arg nod_address $NOD_CONTRACT_ADDRESS --arg token_allocator_address $TOKEN_ALLOCATOR_CONTRACT_ADDRESS --from-file ./contracts/metadosis/fixtures/init.json)
          METADOSIS_CONTRACT_ADDRESS=$(./scripts/init_contract.sh "Metadosis" $METADOSIS_CODE_ID "$INIT_PAYLOAD")
          echo "METADOSIS_CONTRACT_ADDRESS=$METADOSIS_CONTRACT_ADDRESS" >> $GITHUB_ENV

          echo "Update Tribute burner to Metadosis contract"
          UPDATE_PAYLOAD=$(jq -n --arg new_burner $METADOSIS_CONTRACT_ADDRESS -f ./contracts/tribute/fixtures/update-burner.json)
          ./scripts/execute_tx.sh $TRIBUTE_CONTRACT_ADDRESS "$UPDATE_PAYLOAD"

      - name: Deploy Token Miner
        run: |
          TOKEN_MINER_CODE_ID=$(./scripts/store_code.sh artifacts/token_miner.wasm)
          INIT_PAYLOAD=$(jq -n --arg gratis_address $GRATIS_CONTRACT_ADDRESS --arg promis_address $PROMIS_CONTRACT_ADDRESS --arg nod_address $NOD_CONTRACT_ADDRESS --arg price_oracle_address $PRICE_ORACLE_CONTRACT_ADDRESS --arg faucet_address $FAUCET_ADDRESS --from-file ./contracts/token-miner/fixtures/init.json)
          TOKEN_MINER_CONTRACT_ADDRESS=$(./scripts/init_contract.sh "Token Miner" $TOKEN_MINER_CODE_ID "$INIT_PAYLOAD")
          echo "TOKEN_MINER_CONTRACT_ADDRESS=$TOKEN_MINER_CONTRACT_ADDRESS" >> $GITHUB_ENV
          echo "Link Gratis and Token Miner contracts"
          UPDATE_PAYLOAD=$(jq -n --arg new_minter $TOKEN_MINER_CONTRACT_ADDRESS -f ./contracts/gratis/fixtures/update-minter.json)
          ./scripts/execute_tx.sh $GRATIS_CONTRACT_ADDRESS "$UPDATE_PAYLOAD"
          echo "Link Promis and Token Miner contracts"
          UPDATE_PAYLOAD=$(jq -n --arg new_minter $TOKEN_MINER_CONTRACT_ADDRESS -f ./contracts/promis/fixtures/update-minter.json)
          ./scripts/execute_tx.sh $PROMIS_CONTRACT_ADDRESS "$UPDATE_PAYLOAD"
          echo "Grant access"
          UPDATE_PAYLOAD=$(jq -n --arg address outbe10np732vf0mcf5lc3czlf7x7vfzj4dcmny2x4ja -f ./contracts/token-miner/fixtures/add_to_access_list.json)
          ./scripts/execute_tx.sh $TOKEN_MINER_CONTRACT_ADDRESS "$UPDATE_PAYLOAD"

      - name: Print output
        run: |
          echo "Deploy output:"
          env | sort | grep -E 'CODE_ID|ADDRESS' > output.txt
          cat output.txt

      - name: Update Contract Registry
        run: |
          COMMIT_ID=${{ github.sha }}
          IS_LATEST=${{ inputs.is_latest }}
          echo "Updating Contract Registry with commit=$COMMIT_ID and latest=$IS_LATEST"
          CONTRACTS=$(./scripts/parse_contracts.sh output.txt)
          UPDATE_PAYLOAD=$(jq -n --arg commit_id $COMMIT_ID --argjson contracts "$CONTRACTS" --argjson is_latest $IS_LATEST --from-file ./contracts/contract-registry/fixtures/publish.json)
          ./scripts/execute_tx.sh $CONTRACT_REGISTRY_CONTRACT_ADDRESS "$UPDATE_PAYLOAD"

      - name: Send output
        id: sendoutput
        run: |
          cat output.txt >> "$GITHUB_OUTPUT"
