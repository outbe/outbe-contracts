{
  "contract_name": "agent",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "properties": {
      "paused": {
        "type": [
          "boolean",
          "null"
        ]
      },
      "threshold": {
        "type": [
          "integer",
          "null"
        ],
        "format": "uint8",
        "minimum": 0.0
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "create_agent"
        ],
        "properties": {
          "create_agent": {
            "type": "object",
            "required": [
              "agent"
            ],
            "properties": {
              "agent": {
                "$ref": "#/definitions/AgentInput"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_agent"
        ],
        "properties": {
          "update_agent": {
            "type": "object",
            "required": [
              "agent",
              "id"
            ],
            "properties": {
              "agent": {
                "$ref": "#/definitions/AgentInput"
              },
              "id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "vote_agent"
        ],
        "properties": {
          "vote_agent": {
            "type": "object",
            "required": [
              "approve",
              "id"
            ],
            "properties": {
              "approve": {
                "type": "boolean"
              },
              "id": {
                "type": "string"
              },
              "reason": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AgentInput": {
        "type": "object",
        "required": [
          "agent_type",
          "avg_cu",
          "docs_uri",
          "email",
          "jurisdictions",
          "name",
          "status"
        ],
        "properties": {
          "agent_type": {
            "$ref": "#/definitions/AgentType"
          },
          "avg_cu": {
            "$ref": "#/definitions/Uint128"
          },
          "discord": {
            "type": [
              "string",
              "null"
            ]
          },
          "docs_uri": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email": {
            "type": "string"
          },
          "endpoint": {
            "type": [
              "string",
              "null"
            ]
          },
          "jurisdictions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata_json": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/definitions/AgentStatus"
          }
        },
        "additionalProperties": false
      },
      "AgentStatus": {
        "type": "string",
        "enum": [
          "pending",
          "approved",
          "rejected",
          "removed",
          "on_hold",
          "blacklisted"
        ]
      },
      "AgentType": {
        "type": "string",
        "enum": [
          "n_r_a",
          "c_r_a",
          "r_f_a",
          "i_b_a",
          "c_c_a"
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "list_all"
        ],
        "properties": {
          "list_all": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "query_order": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Order"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_by_id"
        ],
        "properties": {
          "get_by_id": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "query_by_address"
        ],
        "properties": {
          "query_by_address": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "query_order": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Order"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "query_votes_by_agent"
        ],
        "properties": {
          "query_votes_by_agent": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Order": {
        "type": "string",
        "enum": [
          "ascending",
          "descending"
        ]
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_by_id": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AgentResponse",
      "type": "object",
      "required": [
        "agent"
      ],
      "properties": {
        "agent": {
          "$ref": "#/definitions/Agent"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Agent": {
          "type": "object",
          "required": [
            "agent_type",
            "avg_cu",
            "docs_uri",
            "email",
            "jurisdictions",
            "name",
            "status",
            "submitted_at",
            "updated_at",
            "wallet"
          ],
          "properties": {
            "agent_type": {
              "$ref": "#/definitions/AgentType"
            },
            "avg_cu": {
              "$ref": "#/definitions/Uint128"
            },
            "discord": {
              "type": [
                "string",
                "null"
              ]
            },
            "docs_uri": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "email": {
              "type": "string"
            },
            "endpoint": {
              "type": [
                "string",
                "null"
              ]
            },
            "jurisdictions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "metadata_json": {
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "type": "string"
            },
            "status": {
              "$ref": "#/definitions/AgentStatus"
            },
            "submitted_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "updated_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "wallet": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "AgentStatus": {
          "type": "string",
          "enum": [
            "pending",
            "approved",
            "rejected",
            "removed",
            "on_hold",
            "blacklisted"
          ]
        },
        "AgentType": {
          "type": "string",
          "enum": [
            "n_r_a",
            "c_r_a",
            "r_f_a",
            "i_b_a",
            "c_c_a"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "list_all": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListAllResponse",
      "type": "object",
      "required": [
        "agents"
      ],
      "properties": {
        "agents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Agent"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Agent": {
          "type": "object",
          "required": [
            "agent_type",
            "avg_cu",
            "docs_uri",
            "email",
            "jurisdictions",
            "name",
            "status",
            "submitted_at",
            "updated_at",
            "wallet"
          ],
          "properties": {
            "agent_type": {
              "$ref": "#/definitions/AgentType"
            },
            "avg_cu": {
              "$ref": "#/definitions/Uint128"
            },
            "discord": {
              "type": [
                "string",
                "null"
              ]
            },
            "docs_uri": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "email": {
              "type": "string"
            },
            "endpoint": {
              "type": [
                "string",
                "null"
              ]
            },
            "jurisdictions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "metadata_json": {
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "type": "string"
            },
            "status": {
              "$ref": "#/definitions/AgentStatus"
            },
            "submitted_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "updated_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "wallet": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "AgentStatus": {
          "type": "string",
          "enum": [
            "pending",
            "approved",
            "rejected",
            "removed",
            "on_hold",
            "blacklisted"
          ]
        },
        "AgentType": {
          "type": "string",
          "enum": [
            "n_r_a",
            "c_r_a",
            "r_f_a",
            "i_b_a",
            "c_c_a"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "query_by_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListAllResponse",
      "type": "object",
      "required": [
        "agents"
      ],
      "properties": {
        "agents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Agent"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Agent": {
          "type": "object",
          "required": [
            "agent_type",
            "avg_cu",
            "docs_uri",
            "email",
            "jurisdictions",
            "name",
            "status",
            "submitted_at",
            "updated_at",
            "wallet"
          ],
          "properties": {
            "agent_type": {
              "$ref": "#/definitions/AgentType"
            },
            "avg_cu": {
              "$ref": "#/definitions/Uint128"
            },
            "discord": {
              "type": [
                "string",
                "null"
              ]
            },
            "docs_uri": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "email": {
              "type": "string"
            },
            "endpoint": {
              "type": [
                "string",
                "null"
              ]
            },
            "jurisdictions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "metadata_json": {
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "type": "string"
            },
            "status": {
              "$ref": "#/definitions/AgentStatus"
            },
            "submitted_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "updated_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "wallet": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "AgentStatus": {
          "type": "string",
          "enum": [
            "pending",
            "approved",
            "rejected",
            "removed",
            "on_hold",
            "blacklisted"
          ]
        },
        "AgentType": {
          "type": "string",
          "enum": [
            "n_r_a",
            "c_r_a",
            "r_f_a",
            "i_b_a",
            "c_c_a"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "query_votes_by_agent": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AgentVotesResponse",
      "type": "object",
      "required": [
        "votes"
      ],
      "properties": {
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Vote"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "Vote": {
          "type": "object",
          "required": [
            "address",
            "approve",
            "at"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "approve": {
              "type": "boolean"
            },
            "at": {
              "$ref": "#/definitions/Timestamp"
            },
            "reason": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
