{
  "contract_name": "metadosis",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "deficit"
    ],
    "properties": {
      "creator": {
        "type": [
          "string",
          "null"
        ]
      },
      "deficit": {
        "description": "Deficit config where 1 mean 100%",
        "allOf": [
          {
            "$ref": "#/definitions/Decimal"
          }
        ]
      },
      "nod": {
        "anyOf": [
          {
            "$ref": "#/definitions/Addr"
          },
          {
            "type": "null"
          }
        ]
      },
      "price_oracle": {
        "anyOf": [
          {
            "$ref": "#/definitions/Addr"
          },
          {
            "type": "null"
          }
        ]
      },
      "random_oracle": {
        "anyOf": [
          {
            "$ref": "#/definitions/Addr"
          },
          {
            "type": "null"
          }
        ]
      },
      "token_allocator": {
        "anyOf": [
          {
            "$ref": "#/definitions/Addr"
          },
          {
            "type": "null"
          }
        ]
      },
      "tribute": {
        "anyOf": [
          {
            "$ref": "#/definitions/Addr"
          },
          {
            "type": "null"
          }
        ]
      },
      "vector": {
        "anyOf": [
          {
            "$ref": "#/definitions/Addr"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "prepare"
        ],
        "properties": {
          "prepare": {
            "type": "object",
            "properties": {
              "run_date": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "execute"
        ],
        "properties": {
          "execute": {
            "type": "object",
            "properties": {
              "run_date": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "burn_all"
        ],
        "properties": {
          "burn_all": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "metadosis_info"
        ],
        "properties": {
          "metadosis_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "history"
        ],
        "properties": {
          "history": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "history": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HistoryResponse",
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistoryData"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "DailyRunHistory": {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RunHistoryInfo"
              }
            }
          },
          "additionalProperties": false
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "HistoryData": {
          "type": "object",
          "required": [
            "daily_run_history",
            "date"
          ],
          "properties": {
            "daily_run_history": {
              "$ref": "#/definitions/DailyRunHistory"
            },
            "date": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "RunHistoryInfo": {
          "type": "object",
          "required": [
            "assigned_tributes",
            "assigned_tributes_sum",
            "capacity",
            "deficit",
            "limit",
            "run_type",
            "winner_tributes",
            "winner_tributes_sum"
          ],
          "properties": {
            "assigned_tributes": {
              "description": "Count of tributes was assigned for this run",
              "type": "integer",
              "format": "uint",
              "minimum": 0.0
            },
            "assigned_tributes_sum": {
              "description": "Sum of tributes were assigned for this run or touch_limit for Touch",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "capacity": {
              "description": "Lysis capacity or = limit for Touch",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "deficit": {
              "description": "Lysis deficit or 0 for Touch",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "limit": {
              "description": "Lysis or Touch limit",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "run_type": {
              "description": "Identifies what kind of run it was",
              "allOf": [
                {
                  "$ref": "#/definitions/RunType"
                }
              ]
            },
            "vector_rate": {
              "description": "Vector rate or None for Touch",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "winner_tributes": {
              "description": "Count of winners in this run",
              "type": "integer",
              "format": "uint",
              "minimum": 0.0
            },
            "winner_tributes_sum": {
              "description": "Winners sum in this run or touch_limit for Touch",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "RunType": {
          "type": "string",
          "enum": [
            "lysis",
            "touch"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "metadosis_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MetadosisInfoResponse",
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadosisInfoData"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "DailyRunState": {
          "type": "object",
          "required": [
            "number_of_runs"
          ],
          "properties": {
            "last_tribute_id": {
              "type": [
                "string",
                "null"
              ]
            },
            "number_of_runs": {
              "type": "integer",
              "format": "uint",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "LysisInfo": {
          "type": "object",
          "required": [
            "lysis_deficits",
            "lysis_limit",
            "total_deficit",
            "total_fees",
            "total_gratis_limit",
            "total_lysis_limit",
            "total_tribute_interest",
            "vector_rates"
          ],
          "properties": {
            "lysis_deficits": {
              "description": "Deficits for each execution where the index in 0..23 corresponds for each daily execution",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "lysis_limit": {
              "description": "Lysis limit = `total_lysis_limit / 24`",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "total_deficit": {
              "description": "Total Deficit",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "total_fees": {
              "description": "Total fees to be paid for validators (currently 0)",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "total_gratis_limit": {
              "description": "Total emission limit in native coins for this day",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "total_lysis_limit": {
              "description": "Total Lysis Limit = `total_emission_limit - total_fees`",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "total_tribute_interest": {
              "description": "Total Tributes interest",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "vector_rates": {
              "description": "Vector rates for each execution where the index in 0..23 corresponds for each daily execution",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Uint128"
              }
            }
          },
          "additionalProperties": false
        },
        "MetadosisInfo": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "lysis_and_touch"
              ],
              "properties": {
                "lysis_and_touch": {
                  "type": "object",
                  "required": [
                    "lysis_info",
                    "touch_info"
                  ],
                  "properties": {
                    "lysis_info": {
                      "$ref": "#/definitions/LysisInfo"
                    },
                    "touch_info": {
                      "$ref": "#/definitions/TouchInfo"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "touch"
              ],
              "properties": {
                "touch": {
                  "type": "object",
                  "required": [
                    "touch_info"
                  ],
                  "properties": {
                    "touch_info": {
                      "$ref": "#/definitions/TouchInfo"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "MetadosisInfoData": {
          "type": "object",
          "required": [
            "date",
            "info",
            "state"
          ],
          "properties": {
            "date": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "info": {
              "$ref": "#/definitions/MetadosisInfo"
            },
            "state": {
              "$ref": "#/definitions/DailyRunState"
            }
          },
          "additionalProperties": false
        },
        "TouchInfo": {
          "type": "object",
          "required": [
            "gold_ignot_price",
            "total_fees",
            "total_gratis_limit",
            "touch_limit"
          ],
          "properties": {
            "gold_ignot_price": {
              "description": "Gold ignot price in native coins",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "total_fees": {
              "description": "Total fees to be paid for validators (currently 0)",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "total_gratis_limit": {
              "description": "Total emission limit in native coins for this day",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "touch_limit": {
              "description": "Touch limit = `(total_emission_limit - total_fees) / 24`",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
