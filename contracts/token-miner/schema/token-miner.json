{
  "contract_name": "token-miner",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "Message to instantiate the contract",
    "type": "object",
    "required": [
      "access_list",
      "gratis_contract",
      "nod_contract",
      "pow_complexity",
      "price_oracle_contract",
      "promis_contract"
    ],
    "properties": {
      "access_list": {
        "description": "Initial access",
        "type": "array",
        "items": {
          "$ref": "#/definitions/AccessMsg"
        }
      },
      "gratis_contract": {
        "description": "Address of the Gratis token contract",
        "type": "string"
      },
      "nod_contract": {
        "description": "Address of the Nod NFT contract",
        "type": "string"
      },
      "pow_complexity": {
        "description": "Mining complexity for proof-of-work algorithm",
        "type": "integer",
        "format": "uint",
        "minimum": 0.0
      },
      "price_oracle_contract": {
        "description": "Address of the Price Oracle contract",
        "type": "string"
      },
      "promis_contract": {
        "description": "Address of the Promis token contract",
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AccessMsg": {
        "type": "object",
        "required": [
          "address",
          "permissions"
        ],
        "properties": {
          "address": {
            "description": "Address to add to the access list",
            "type": "string"
          },
          "permissions": {
            "description": "Permissions for this address",
            "allOf": [
              {
                "$ref": "#/definitions/AccessPermissions"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AccessPermissions": {
        "description": "Access permissions for an address",
        "type": "object",
        "required": [
          "can_mint_gratis",
          "can_mint_promis"
        ],
        "properties": {
          "can_mint_gratis": {
            "description": "Whether this address can mint Gratis tokens",
            "type": "boolean"
          },
          "can_mint_promis": {
            "description": "Whether this address can mint Promis tokens",
            "type": "boolean"
          },
          "note": {
            "description": "Optional note about this address (for admin reference)",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "Execute messages for the contract",
    "oneOf": [
      {
        "description": "Mint tokens to a recipient address Only addresses in the access list with appropriate permissions can call this",
        "type": "object",
        "required": [
          "mine"
        ],
        "properties": {
          "mine": {
            "type": "object",
            "required": [
              "amount",
              "recipient",
              "token_type"
            ],
            "properties": {
              "amount": {
                "description": "Amount of tokens to mint",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              },
              "recipient": {
                "description": "Address to receive the minted tokens",
                "type": "string"
              },
              "token_type": {
                "description": "Type of token to mint (Gratis or Promis)",
                "allOf": [
                  {
                    "$ref": "#/definitions/TokenType"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Mine Gratis tokens using a qualified Nod NFT This will check if the current price from Price Oracle is >= floor_price If qualified, it will mint Gratis tokens based on gratis_load_minor and burn the Nod NFT",
        "type": "object",
        "required": [
          "mine_gratis_with_nod"
        ],
        "properties": {
          "mine_gratis_with_nod": {
            "type": "object",
            "required": [
              "nod_token_id",
              "nonce"
            ],
            "properties": {
              "nod_token_id": {
                "description": "Token ID of the Nod NFT to use for mining",
                "type": "string"
              },
              "nonce": {
                "description": "Nonce for proof-of-work. Empty string can be specified for demo purposes",
                "allOf": [
                  {
                    "$ref": "#/definitions/HexBinary"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Add an address to the access list (admin only)",
        "type": "object",
        "required": [
          "add_to_access_list"
        ],
        "properties": {
          "add_to_access_list": {
            "type": "object",
            "required": [
              "address",
              "permissions"
            ],
            "properties": {
              "address": {
                "description": "Address to add to the access list",
                "type": "string"
              },
              "permissions": {
                "description": "Permissions for this address",
                "allOf": [
                  {
                    "$ref": "#/definitions/AccessPermissions"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove an address from the access list (admin only)",
        "type": "object",
        "required": [
          "remove_from_access_list"
        ],
        "properties": {
          "remove_from_access_list": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "description": "Address to remove from the access list",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update permissions for an existing address in the access list (admin only)",
        "type": "object",
        "required": [
          "update_permissions"
        ],
        "properties": {
          "update_permissions": {
            "type": "object",
            "required": [
              "address",
              "permissions"
            ],
            "properties": {
              "address": {
                "description": "Address to update permissions for",
                "type": "string"
              },
              "permissions": {
                "description": "New permissions for this address",
                "allOf": [
                  {
                    "$ref": "#/definitions/AccessPermissions"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Transfer admin rights to a new address (admin only)",
        "type": "object",
        "required": [
          "transfer_admin"
        ],
        "properties": {
          "transfer_admin": {
            "type": "object",
            "required": [
              "new_admin"
            ],
            "properties": {
              "new_admin": {
                "description": "New admin address",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update contract addresses (admin only)",
        "type": "object",
        "required": [
          "update_contracts"
        ],
        "properties": {
          "update_contracts": {
            "type": "object",
            "properties": {
              "gratis_contract": {
                "description": "New Gratis contract address (optional)",
                "type": [
                  "string",
                  "null"
                ]
              },
              "nod_contract": {
                "description": "New Nod NFT contract address (optional)",
                "type": [
                  "string",
                  "null"
                ]
              },
              "price_oracle_contract": {
                "description": "New Price Oracle contract address (optional)",
                "type": [
                  "string",
                  "null"
                ]
              },
              "promis_contract": {
                "description": "New Promis contract address (optional)",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AccessPermissions": {
        "description": "Access permissions for an address",
        "type": "object",
        "required": [
          "can_mint_gratis",
          "can_mint_promis"
        ],
        "properties": {
          "can_mint_gratis": {
            "description": "Whether this address can mint Gratis tokens",
            "type": "boolean"
          },
          "can_mint_promis": {
            "description": "Whether this address can mint Promis tokens",
            "type": "boolean"
          },
          "note": {
            "description": "Optional note about this address (for admin reference)",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "HexBinary": {
        "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "TokenType": {
        "description": "Token types that can be minted",
        "type": "string",
        "enum": [
          "gratis",
          "promis"
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Query messages for the contract",
    "oneOf": [
      {
        "description": "Get contract configuration",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get access permissions for a specific address",
        "type": "object",
        "required": [
          "access_permissions"
        ],
        "properties": {
          "access_permissions": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "List all addresses in the access list with optional pagination",
        "type": "object",
        "required": [
          "access_list"
        ],
        "properties": {
          "access_list": {
            "type": "object",
            "properties": {
              "limit": {
                "description": "Maximum number of addresses to return",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "description": "Address to start listing from (optional, for pagination)",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Check if an address can mint a specific token type",
        "type": "object",
        "required": [
          "can_mint"
        ],
        "properties": {
          "can_mint": {
            "type": "object",
            "required": [
              "address",
              "token_type"
            ],
            "properties": {
              "address": {
                "description": "Address to check",
                "type": "string"
              },
              "token_type": {
                "description": "Token type to check",
                "allOf": [
                  {
                    "$ref": "#/definitions/TokenType"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "TokenType": {
        "description": "Token types that can be minted",
        "type": "string",
        "enum": [
          "gratis",
          "promis"
        ]
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "migrate"
        ],
        "properties": {
          "migrate": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "sudo": null,
  "responses": {
    "access_list": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AccessListResponse",
      "description": "Response for AccessList query",
      "type": "object",
      "required": [
        "addresses"
      ],
      "properties": {
        "addresses": {
          "description": "List of addresses and their permissions",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/Addr"
              },
              {
                "$ref": "#/definitions/AccessPermissions"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AccessPermissions": {
          "description": "Access permissions for an address",
          "type": "object",
          "required": [
            "can_mint_gratis",
            "can_mint_promis"
          ],
          "properties": {
            "can_mint_gratis": {
              "description": "Whether this address can mint Gratis tokens",
              "type": "boolean"
            },
            "can_mint_promis": {
              "description": "Whether this address can mint Promis tokens",
              "type": "boolean"
            },
            "note": {
              "description": "Optional note about this address (for admin reference)",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "access_permissions": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AccessPermissionsResponse",
      "description": "Response for AccessPermissions query",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "description": "The address being queried",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "permissions": {
          "description": "Permissions for this address (None if not in access list)",
          "anyOf": [
            {
              "$ref": "#/definitions/AccessPermissions"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AccessPermissions": {
          "description": "Access permissions for an address",
          "type": "object",
          "required": [
            "can_mint_gratis",
            "can_mint_promis"
          ],
          "properties": {
            "can_mint_gratis": {
              "description": "Whether this address can mint Gratis tokens",
              "type": "boolean"
            },
            "can_mint_promis": {
              "description": "Whether this address can mint Promis tokens",
              "type": "boolean"
            },
            "note": {
              "description": "Optional note about this address (for admin reference)",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "can_mint": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CanMintResponse",
      "description": "Response for CanMint query",
      "type": "object",
      "required": [
        "can_mint"
      ],
      "properties": {
        "can_mint": {
          "description": "Whether the address can mint the specified token type",
          "type": "boolean"
        },
        "reason": {
          "description": "Human-readable reason if cannot mint",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "description": "Response for Config query",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/Config"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Config": {
          "description": "Configuration for the token minter contract",
          "type": "object",
          "required": [
            "admin",
            "gratis_contract",
            "nod_contract",
            "pow_complexity",
            "price_oracle_contract",
            "promis_contract"
          ],
          "properties": {
            "admin": {
              "description": "Address of the admin who can manage the access list",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "gratis_contract": {
              "description": "Address of the Gratis token contract",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "nod_contract": {
              "description": "Address of the Nod NFT contract",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "pow_complexity": {
              "description": "Mining complexity for proof-of-work algorithm",
              "type": "integer",
              "format": "uint",
              "minimum": 0.0
            },
            "price_oracle_contract": {
              "description": "Address of the Price Oracle contract",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "promis_contract": {
              "description": "Address of the Promis token contract",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
